From 79559ac8e2475e8f3f4a86ccef611e55f2307064 Mon Sep 17 00:00:00 2001
From: Matus Kral <matuskral@me.com>
Date: Wed, 18 Mar 2015 22:21:10 +0100
Subject: [PATCH] IMX6: allowing infinite timeout on read from dev file.

	SocketRead() was changed to polling (instead of select()).
In order for this to work, kernel driver must be returning POLLHUP
to interrupt waiting SocketRead(). Otherwise infinite timeout and
no new data would block CEC termination.
---
 src/libcec/adapter/IMX/IMXCECAdapterCommunication.cpp |  2 +-
 platform/src/posix/os-socket.h                 | 22 +++++-----------------
 2 files changed, 6 insertions(+), 18 deletions(-)

diff --git a/src/libcec/adapter/IMX/IMXCECAdapterCommunication.cpp b/src/libcec/adapter/IMX/IMXCECAdapterCommunication.cpp
index 99a55d5..82f3ec1 100644
--- a/src/libcec/adapter/IMX/IMXCECAdapterCommunication.cpp
+++ b/src/libcec/adapter/IMX/IMXCECAdapterCommunication.cpp
@@ -297,7 +297,7 @@ void *CIMXCECAdapterCommunication::Process(void)
 
   while (!IsStopped())
   {
-    if (IsInitialised() && (ret = m_dev->Read((char *)&event, sizeof(event), 3000)) > 0)
+    if (IsInitialised() && (ret = m_dev->Read((char *)&event, sizeof(event), 0)) > 0)
     {
 
       initiator = cec_logical_address(event.msg[0] >> 4);
diff --git a/platform/src/posix/os-socket.h b/platform/src/posix/os-socket.h
index 7156c75..4e933de 100644
--- a/platform/src/posix/os-socket.h
+++ b/platform/src/posix/os-socket.h
@@ -113,8 +113,7 @@ namespace PLATFORM
 
   inline ssize_t SocketRead(socket_t socket, int *iError, void* data, size_t len, uint64_t iTimeoutMs /*= 0*/)
   {
-    fd_set port;
-    struct timeval timeout, *tv;
+    struct pollfd fds;
     ssize_t iBytesRead(0);
     *iError = 0;
     CTimeout readTimeout(iTimeoutMs);
@@ -127,28 +126,16 @@
 
     while (iBytesRead >= 0 && iBytesRead < (ssize_t)len && (iTimeoutMs == 0 || readTimeout.TimeLeft() > 0))
     {
-      if (iTimeoutMs == 0)
-      {
-        tv = NULL;
-      }
-      else
-      {
-        long iTimeLeft = (long)readTimeout.TimeLeft();
-        timeout.tv_sec  = iTimeLeft / (long int)1000.;
-        timeout.tv_usec = iTimeLeft % (long int)1000.;
-        tv = &timeout;
-      }
-
-      FD_ZERO(&port);
-      FD_SET(socket, &port);
-      int32_t returnv = select(socket + 1, &port, NULL, NULL, tv);
+      fds.fd = (int)socket;
+      fds.events = POLLIN | POLLHUP;
+      ssize_t returnv = (ssize_t)poll(&fds, 1, iTimeoutMs ? iTimeoutMs : -1);
 
       if (returnv == -1)
       {
         *iError = errno;
         return -errno;
       }
-      else if (returnv == 0)
+      else if (returnv == 0 || fds.revents & POLLHUP)
       {
         break; //nothing to read
       }
